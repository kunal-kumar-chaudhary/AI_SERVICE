from dotenv import load_dotenv
from hana_ml import dataframe
import os


load_dotenv()

host = str(os.getenv("HANA_HOST"))


def get_hana_db():
    connection = dataframe.ConnectionContext(
        address=host,
        port=443,
        user=str(os.getenv("HANA_USER")),
        password=str(os.getenv("HANA_PASSWORD")),
    )
    return connection


# getting connection object
conn = get_hana_db()


create_table_sql = """
CREATE COLUMN TABLE documents_embedding (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    document_text NVARCHAR(5000),
    embedding REAL_VECTOR(1536),
    chunk_metadata NVARCHAR(1000)
)
"""

# Executing table creation
conn.execute_sql(create_table_sql)
print("table created successfully")


# inserting new record
import json

def insert_embedding(document_text, embedding_vector, chunk_metadata=None):
    conn = get_hana_db()

    # escaping text for SQL
    escaped_text = document_text.replace("'", "''")

    # Converting metadata dict to JSON string and escaping it
    if chunk_metadata:
        metadata_json = json.dumps(chunk_metadata)
        escaped_metadata = metadata_json.replace("'", "''")
    else:
        escaped_metadata = "{}"

    insert_sql = f"""
    INSERT INTO documents_embedding (document_text, embedding, chunk_metadata)
    VALUES ('{escaped_text}', TO_REAL_VECTOR('{str(embedding_vector)}'), '{escaped_metadata}')
    """

    try:
        conn.execute_sql(insert_sql)
        print("successfully inserted document and embedding")
        return True
    except Exception as e:
        return False

# function to find top k similiar documents
def search_similiar_documents(conn, query_embedding, top_k=5):
    search_sql = """
    SELECT id, document_text, COSINE_SIMILARITY(embedding, ?)
    AS similarity
    FROM documents_embedding
    ORDER BY similarity DESC
    LIMIT ?
    """
    try:
        df = conn.execute_sql(search_sql, [query_embedding, top_k])
        # converting hana_ml dataframe to pandas dataframe
        results = df.collect() 
        return results
         
    except Exception as e:
        print(f"error searching similar documents: {e}")
        return None

